from fileinput import filename
import os
import shutil
import subprocess

from rdkit import Chem
from .file_parser import mol2xyz


def cosmo_calc(folder, sdf, cosmotherm_path, cosmo_database_path, charge, mult, T_list, df_pure):
    basename = os.path.basename(sdf)
    file_name = os.path.splitext(basename)[0]
    parent_dir = os.getcwd()
    
    child_dir = os.path.abspath(os.path.join(folder, file_name))
    os.chdir(child_dir)

    mol = Chem.SDMolSupplier(sdf, removeHs=False, sanitize=False)[0]
    xyz = mol2xyz(mol)

    # prepare for turbomole calculation
    os.makedirs("xyz", exist_ok=True)
    xyz_file_name = f'{file_name}.xyz'
    with open(os.path.join("xyz", xyz_file_name), "w+") as f:
        f.write(xyz)

    txtfile = f'{file_name}.txt'
    with open(txtfile, "w+") as f:
        f.write(f"{file_name} {charge} {mult}")

    #create and move to working directory
    os.makedirs("scratch", exist_ok=True)
    os.chdir("scratch")
    shutil.copy(os.path.join(child_dir, txtfile), txtfile)
    shutil.copytree(os.path.join(child_dir, "xyz"), "xyz")

    #run the job
    logfile = file_name + '.log'
    outfile = file_name + '.out'
    with open(outfile, 'w') as out:
        subprocess.run(f'calculate -l {txtfile} -m BP-TZVPD-FINE-COSMO-SP -f xyz -din xyz > {logfile}', shell=True, stdout=out, stderr=out)
        subprocess.run(f'calculate -l {txtfile} -m BP-TZVPD-GAS-SP -f xyz -din xyz > {logfile}', shell=True, stdout=out, stderr=out)

    #move files back
    shutil.copy(logfile, os.path.join(child_dir, logfile))
    shutil.copy(outfile, os.path.join(child_dir, outfile))

    for file in os.listdir("CosmofilesBP-TZVPD-FINE-COSMO-SP"):
        if file.endswith("cosmo"):
            shutil.copy(os.path.join("CosmofilesBP-TZVPD-FINE-COSMO-SP",file), file)
            shutil.copy(os.path.join("CosmofilesBP-TZVPD-FINE-COSMO-SP",file), os.path.join(child_dir, file))
    for file in os.listdir("EnergyfilesBP-TZVPD-FINE-COSMO-SP"):
        if file.endswith("energy"):
            shutil.copy(os.path.join("EnergyfilesBP-TZVPD-FINE-COSMO-SP", file), file)
            shutil.copy(os.path.join("EnergyfilesBP-TZVPD-FINE-COSMO-SP", file), os.path.join(child_dir, file))
    
    # prepare for cosmo calculation
    for index, row in df_pure.iterrows():
        script = generate_cosmo_input(file_name, cosmotherm_path, cosmo_database_path, T_list, row)

        inpfile = f'{file_name}_{row.cosmo_name}.inp'
        with open(inpfile, "w+") as f:
            f.write(script)

        cosmo_command = os.path.join(cosmotherm_path, "COSMOtherm", "BIN-LINUX", "cosmotherm")
        outfile = f'{file_name}_{row.cosmo_name}.out'
        tabfile = f'{file_name}_{row.cosmo_name}.tab'
        with open(outfile, 'w') as out:
            subprocess.run(f'{cosmo_command} {inpfile}', shell=True, stdout=out, stderr=out)

        #move files back
        shutil.copy(inpfile, os.path.join(child_dir, inpfile))
        shutil.copy(outfile, os.path.join(child_dir, outfile))
        shutil.copy(tabfile, os.path.join(child_dir, tabfile))

    os.chdir(child_dir)

    #remove working directory
    shutil.rmtree("scratch")
    os.remove(sdf)
    os.chdir(parent_dir)
    
def generate_cosmo_input(name, cosmotherm_path, cosmo_database_path, T_list, row):
    """
    Modified from ACS and Yunsie's code
    """

    script = f"""ctd = BP_TZVPD_FINE_21.ctd cdir = "{cosmotherm_path}/COSMOthermX/../COSMOtherm/CTDATA-FILES" ldir = "{cosmotherm_path}/COSMOthermX/../licensefiles"
notempty wtln ehfile
!! generated by COSMOthermX !!
"""

    #solvent
    first_letter = name[0]
    if not first_letter.isalpha() and not first_letter.isnumeric():
        first_letter = '0'
    solvent_dir = f"{cosmo_database_path}/COSMObase2021/BP-TZVPD-FINE/{first_letter}"
    script += f"""f = "{row.cosmo_name}_c0.cosmo" fdir="{solvent_dir}" 
"""
    if int(row.cosmo_conf) > 1:
        script += " Comp = \"" + row.cosmo_name + "\" [ VPfile"
        for k in range(1, int(row.cosmo_conf)):
            script += "\nf = \"" + row.cosmo_name + "_c" + str(k) + ".cosmo\" fdir=\"" + solvent_dir + "\""
        script += " ]\n"
    else:
        script += " VPfile\n"

    #solute
    script += f"""f = "{name}.cosmo" fdir="." VPfile
"""
    for T in T_list:
        script += f"""henry  xh={{ 1 0 }}  tk={T} GSOLV
"""
    return script